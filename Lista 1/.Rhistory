setwd("D:/Codigos/Estatistica computacional/Lista 1")
summary(primatas)
# Exercicio 14
primatas <- read.table("primatas.txt",TRUE,":")
# b)
primatas |>
ggplot(aes(x = especie,fill = genero))+
geom_bar()
library(ggplot2)
library(rpart)
library(rpart.plot)
# b)
primatas |>
ggplot(aes(x = especie,fill = genero))+
geom_bar()
# c)
primatas |>
ggplot(aes(x = altura,y = peso,fill = genero))+
geom_col()+
facet_wrap(~ especie)+
theme_minimal()
# d)
primatas |>
ggplot(aes(x = peso,y = altura,col = especie))+
geom_point()+
facet_wrap(~ genero)+
theme_minimal()
?geom_point
# d)
primatas |>
ggplot(aes(x = peso,y = altura,col = especie))+
geom_point()+
facet_wrap(~ genero)+
theme_minimal()
# c)
primatas |>
ggplot(aes(x = peso,y = altura,fill = genero))+
geom_col()+
facet_wrap(~ especie)+
theme_minimal()
# d)
primatas |>
ggplot(aes(x = peso,y = altura,col = especie))+
geom_point()+
facet_wrap(~ genero)+
theme_minimal()
# c)
primatas |>
ggplot(aes(x = peso,y = altura,fill = genero))+
geom_col()+
facet_wrap(~ especie)+
theme_minimal()
# d)
primatas |>
ggplot(aes(x = peso,y = altura,col = especie))+
geom_point()+
facet_wrap(~ genero)+
theme_minimal()
# c)
primatas |>
ggplot(aes(x = peso,y = altura,fill = genero))+
geom_col()+
facet_wrap(~ especie)+
theme_minimal()
library(ggplot2)
library(rpart)
library(rpart.plot)
#Exercico 1
a <- c(10:30)
b <- c(30:10)
c <- c(a,b)
a2 <- rep(seq(2,8,2),10)
b2 <- c(rep(c(2, 4, 6, 8), 10), 2)
#Exercicio 3
n <- 20:30
a3 <- sum(n^2 + 4*n)
n <- 10:20
b3 <- sum((3*n) / (n + 2*n/n^2))
#Exercicio 4 falta letra c
sorteio <- sample(1:100,40,replace = TRUE)
a4 <- sum(sorteio %% 2 == 0)
b4 <- sum(sorteio > 70)
c4 <- c()
#Exercicio 5
exercico5 <- function(){
qtd4 <- 0
lancamentos <- 0
while(qtd4 != 2){
if(sample(1:6,1) == 4){
qtd4 <- qtd4 + 1
}
lancamentos <- lancamentos + 1
}
lancamentos
}
#Exercicio 6
quantidades <- c()
for(i in 1:10000){
quantidades[i] <- exercico5()
}
mean(quantidades)
#Exercicio 7
fibonacci <- function(n){
if(n < 3){
print("n menor que 3")
return()
}
fib <- c()
fib[1] = 1
fib[2] = 2
for(i in 3:n){
fib[i] <- fib[i-1] + fib[i-2]
}
fib
}
fibonacci(5)
#Exercico 8
participantes <- c("Michel scott","Dwight Schrute","Jim Halpert","Kevin Malone","Creed Bratton")
sorteioAmigoOculto <- function(participantesSorteio){
amigo_secreto <- c(sample(participantesSorteio))
for(i in length(participantesSorteio)){
if(participantesSorteio[i] == amigo_secreto[i]) return(0)
return(1)
}
}
resultadoSorteio <- sorteioAmigoOculto(participantes)
resultadoSorteio <- c()
for (i in 1:10000) {
resultadoSorteio[i] <- sorteioAmigoOculto(participantes)
}
mean(resultadoSorteio)
#Exercicio 9
Crabs <- function(){
somaInicial <- sum(sample(1:6,2,TRUE))
if(somaInicial == 7) return(1)
if(sum(somaInicial == c(2,3,12)) == 1) return(0)
while(TRUE){
proximaSoma <- sum(sample(1:6,2,TRUE))
if(proximaSoma == 7) return(0)
if(proximaSoma == somaInicial) return(1)
}
}
resultasosCrab <- c()
for(i in 1:100000){
resultasosCrab[i] <- Crabs()
}
mean(resultasosCrab)
#Exercicio 10
Passeio <- function(l){
if(l < 0 | l >= 20) return(print("Valor de l invalido"))
while(TRUE){
moeda = sample(1:2,1)
if(moeda == 1){
l = l + 1
} else {
l = l - 1
}
if(l == 0) return(l)
if(l == 20) return(1)
}
}
passeios <- c()
P10mil <- function(l){
for(i in 1:10000)
passeios[i] <- Passeio(l)
mean(passeios)
}
passeiosPlot <- c()
for(i in 1:19){
passeiosPlot[i] <- P10mil(i)
}
#Exercico 1
a <- c(10:30)
a
b <- c(30:10)
b
c <- c(a,b)
c
a2 <- rep(seq(2,8,2),10)
a2
b2 <- c(rep(c(2, 4, 6, 8), 10), 2)
b2
#Exercicio 3
n <- 20:30
a3 <- sum(n^2 + 4*n)
a3
n <- 10:20
b3 <- sum((3*n) / (n + 2*n/n^2))
b3
#Exercicio 4 falta letra c
sorteio <- sample(1:100,40,replace = TRUE)
a4 <- sum(sorteio %% 2 == 0)
a4
b4 <- sum(sorteio > 70)
b4
c4 <- <- which(sorteios %% 2 != 0)
c4 <-  which(sorteios %% 2 != 0)
c4 <-  which(sorteio %% 2 != 0)
c4
sorteio
#Exercicio 5
exercico5 <- function(){
qtd4 <- 0
lancamentos <- 0
while(qtd4 != 2){
if(sample(1:6,1) == 4){
qtd4 <- qtd4 + 1
}
lancamentos <- lancamentos + 1
}
lancamentos
}
exercico5()
#Exercicio 6
quantidades <- c()
for(i in 1:10000){
quantidades[i] <- exercico5()
}
mean(quantidades)
#Exercicio 7
fibonacci <- function(n){
if(n < 3){
print("n menor que 3")
return()
}
fib <- c()
fib[1] = 1
fib[2] = 2
for(i in 3:n){
fib[i] <- fib[i-1] + fib[i-2]
}
fib
}
fibonacci(5)
#Exercico 8
participantes <- c("Michel scott","Dwight Schrute","Jim Halpert","Kevin Malone","Creed Bratton")
sorteioAmigoOculto <- function(participantesSorteio){
amigo_secreto <- c(sample(participantesSorteio))
for(i in length(participantesSorteio)){
if(participantesSorteio[i] == amigo_secreto[i]) return(0)
return(1)
}
}
resultadoSorteio <- sorteioAmigoOculto(participantes)
resultadoSorteio <- c()
for (i in 1:10000) {
resultadoSorteio[i] <- sorteioAmigoOculto(participantes)
}
mean(resultadoSorteio)
#Exercicio 9
Crabs <- function(){
somaInicial <- sum(sample(1:6,2,TRUE))
if(somaInicial == 7) return(1)
if(sum(somaInicial == c(2,3,12)) == 1) return(0)
while(TRUE){
proximaSoma <- sum(sample(1:6,2,TRUE))
if(proximaSoma == 7) return(0)
if(proximaSoma == somaInicial) return(1)
}
}
resultasosCrab <- c()
for(i in 1:100000){
resultasosCrab[i] <- Crabs()
}
#Exercicio 10
Passeio <- function(l){
if(l < 0 | l >= 20) return(print("Valor de l invalido"))
while(TRUE){
moeda = sample(1:2,1)
if(moeda == 1){
l = l + 1
} else {
l = l - 1
}
if(l == 0) return(l)
if(l == 20) return(1)
}
}
passeios <- c()
P10mil <- function(l){
for(i in 1:10000)
passeios[i] <- Passeio(l)
mean(passeios)
}
passeiosPlot <- c()
for(i in 1:19){
passeiosPlot[i] <- P10mil(i)
}
Pplot <- data.frame(passeiosPlot,quantidadeL)
quantidadeL <- c(1:19)
Pplot <- data.frame(passeiosPlot,quantidadeL)
passeiosPlot <- c()
for(i in 1:19){
passeiosPlot[i] <- P10mil(i)
}
P10mil <- function(l){
for(i in 1:10)
passeios[i] <- Passeio(l)
mean(passeios)
}
passeiosPlot <- c()
for(i in 1:19){
passeiosPlot[i] <- P10mil(i)
}
quantidadeL <- c(1:19)
Pplot <- data.frame(passeiosPlot,quantidadeL)
Pplot |>
ggplot(aes(x = quantidadeL, y = passeiosPlot))+
geom_col(fill = "blue")+
theme_minimal()
P10mil <- function(l){
for(i in 1:10000)
passeios[i] <- Passeio(l)
mean(passeios)
}
passeiosPlot <- c()
# Exercicio 11
# a)
Exercicio11a <- function(n){
Posicao <- c(0, 0)
# 1-L 2-R 3-U 4-D
deslocamento <- sample(1:4, n, TRUE)
for(i in 1:n){
switch (deslocamento[i],
"1" = Posicao[1] <- Posicao[1] - 1, # Esquerda
"2" = Posicao[1] <- Posicao[1] + 1, # Direita
"3" = Posicao[2] <- Posicao[2] + 1, # Cima
"4" = Posicao[2] <- Posicao[2] - 1  # Baixo
)
}
return(Posicao)
}
Exercicio11a(8)
# b)
resultadosLink <- c() # Armazenar os resultados
for(i in 1:10000){
P <- Exercicio11a(8) # P é a posição final após 8 movimentos
if(P[1] == 0 & P[2] == 0)  # Verifica se voltou para (0,0)
resultadosLink[i] <- 1
else
resultadosLink[i] <- 0
}
# Calcular a média de vezes que voltou para (0,0)
mean(resultadosLink)
# c)
Exercicio11c <- function(n){
if(n %% 2 == 1) {
return("Numero nao pode ser impar.") # Retorna erro para números ímpares
}
resultadosLinkC <- c() # Inicializa vetor para armazenar resultados
for(i in 1:10000){
Pc <- Exercicio11a(n) # Pc é a posição final após n movimentos
if(Pc[1] == 0 & Pc[2] == 0)  # Verifica se voltou para (0,0)
resultadosLinkC[i] <- 1
else
resultadosLinkC[i] <- 0
}
return(mean(resultadosLinkC))
}
Exercicio11c(44)
# Exercicio 12 1- Cara 2- Coroa
Exercicio12 <- function(steven,garnet){
CC <- sample(0:1,3,TRUE)
if(sum(steven == CC) == 3) return(print("steven"))
if(sum(garnet == CC) == 3) return(print("garnet"))
while(TRUE){
CC[1] <- CC[2]
CC[2] <- CC[3]
CC[3] <- sample(0:1,1)
if(sum(steven == CC) == 3) return(print("steven"))
if(sum(garnet == CC) == 3) return(print("garnet"))
}
}
Exercicio12(c(0,1,0),c(0,0,1))
# Exercicio 13
dados <- read.table("dados.txt",TRUE,";")
str(dados)
dados |>
ggplot(aes(x = Genero))+
geom_bar(fill = "darkred") +
theme_minimal()
dados |>
ggplot(aes(x = Idade))+
geom_histogram(bins = 8, color = "black", fill = "#f1a098")+
labs(title = "Histograma da Idade", x = "Idade", y = "Frequência") +
theme_minimal()+
facet_wrap(~ Genero)
dados |>
ggplot(aes(y = Idade, x = Genero))+
geom_boxplot()+
labs(title = "Boxplot da Idade por Gênero", x = "Gênero", y = "Idade") +
theme_minimal()
# c)
dados |>
ggplot(aes(y = Idade, x = Genero))+
geom_boxplot()+
labs(title = "Boxplot da Idade por Gênero", x = "Gênero", y = "Idade") +
theme_minimal()
# d)
dados |>
ggplot(aes(x = LocalDaMorte))+
geom_bar(fill = "red")+
labs(title = "Gráfico por local da morte", x = "Local", y = "Frequência")
# e)
dados |>
ggplot(aes(x = AnoDaMorte))+
geom_bar(fill = "red")+
theme_minimal()
