setwd("D:/Codigos/Estatistica computacional/Lista 2")
library(rpart)
library(rpart.plot)
library(ggplot2)
diabetes <- read.csv("diabetes.txt", sep=";")
set.seed(1900)
diabetes <- diabetes[sample(nrow(diabetes)),]
n = round(0.8*nrow(diabetes))
treinamento <- diabetes[1:n,]
teste <- diabetes[-(1:n),]
treinamento |>
rpart(formula = Diabetic~., method = "class") |>
rpart.plot()
modeloArvore <- rpart(data = treinamento,formula =  Diabetic~., method =  "class")
previsao <- predict(modeloArvore,newdata = teste, type = "class")
mean(previsao == teste$Diabetic)
View(diabetes)
cor(diabetes)
# a)
diabetes |>
ggplot(aes(x = Diabetic, y = DiastolicBloodPressure))+
geom_point()
# a)
diabetes |>
ggplot(aes(x = Age, y = DiastolicBloodPressure))+
geom_point()
# a)
diabetes |>
ggplot(aes(x = Age, y = DiastolicBloodPressure, fill = Diabetic))+
geom_point()
mean(previsao == teste$Diabetic)
print(x)
Diabete(x) <- function(){
print(x)
}
Diabete() <- function(x){
print(x)
}
Diabete <- function(x){
print(x)
}
Diabete(4)
str(diabetes)
predict(modeloArvore,newdata = teste[1], type = "class")
modeloArvore <- rpart(data = treinamento,formula =  Diabetic~., method =  "class")
previsao <- predict(modeloArvore,newdata = teste, type = "class")
previsao <- predict(modeloArvore,newdata = teste, type = "class")
previsao
# b)
treinamento |>
rpart(formula = Diabetic~., method = "class") |>
rpart.plot()
Diabete <- function(paciente){
if(paciente$Pregnancies < 2) return(0)
if(paciente$BMI < 22) return(0)
else {
if(paciente$SerumInsulin < 52){
if(paciente$Age < 36) return(0)
else return(1)
} else {
if(paciente$Age >= 36) return(1)
else{
if(paciebte$PlamaGlucose < 96){
if(paciente$BMI >= 33) return(1)
else return(0)
}else{
if(paciente$Age >= 24){
if(paciente$Age < 27) return(0)
else return(1)
} else return(0)
}
}
}
}
}
resultados <- c()
resultados[i] <- Diabete(teste[i])
for (i in 1:3000) {
resultados[i] <- Diabete(teste[i])
}
for (i in 1:3000) {
resultados[i] <- Diabete(teste[i])
}
Diabete <- function(paciente){
#if(paciente$Pregnancies < 2) return(0)
if(paciente$BMI < 22) return(0)
else {
if(paciente$SerumInsulin < 52){
if(paciente$Age < 36) return(0)
else return(1)
} else {
if(paciente$Age >= 36) return(1)
else{
if(paciebte$PlamaGlucose < 96){
if(paciente$BMI >= 33) return(1)
else return(0)
}else{
if(paciente$Age >= 24){
if(paciente$Age < 27) return(0)
else return(1)
} else return(0)
}
}
}
}
}
for (i in 1:3000) {
resultados[i] <- Diabete(teste[i])
}
Diabete <- function(paciente){
if(paciente$Pregnancies < 2) return(0)
if(paciente$BMI < 22) return(0)
else {
if(paciente$SerumInsulin < 52){
if(paciente$Age < 36) return(0)
else return(1)
} else {
if(paciente$Age >= 36) return(1)
else{
if(paciebte$PlamaGlucose < 96){
if(paciente$BMI >= 33) return(1)
else return(0)
}else{
if(paciente$Age >= 24){
if(paciente$Age < 27) return(0)
else return(1)
} else return(0)
}
}
}
}
}
resultados <- c()
for (i in 1:3000) {
resultados[i] <- Diabete(teste[i])
}
View(teste)
for (i in 1:3000) {
resultados[i] <- Diabete(teste[i,])
}
Diabete <- function(paciente){
if(paciente$Pregnancies < 2) return(0)
if(paciente$BMI < 22) return(0)
else {
if(paciente$SerumInsulin < 52){
if(paciente$Age < 36) return(0)
else return(1)
} else {
if(paciente$Age >= 36) return(1)
else{
if(paciebte$PlamaGlucose < 96){
if(paciente$BMI >= 33) return(1)
else return(0)
}else{
if(paciente$Age >= 24){
if(paciente$Age < 27) return(0)
else return(1)
} else return(0)
}
}
}
}
}
resultados <- c()
for (i in 1:3000) {
resultados[i] <- Diabete(teste[])
}
for (i in 1:3000) {
resultados[i] <- Diabete(teste[i])
}
for (i in 1:3000) {
resultados[i] <- Diabete(teste[i,])
}
resultados[i] <- Diabete(teste[i,])
Diabete <- function(paciente){
if(paciente$Pregnancies < 2) return(0)
if(paciente$BMI < 22) return(0)
else {
if(paciente$SerumInsulin < 52){
if(paciente$Age < 36) return(0)
else return(1)
} else {
if(paciente$Age >= 36) return(1)
else{
if(paciente$PlamaGlucose < 96){
if(paciente$BMI >= 33) return(1)
else return(0)
}else{
if(paciente$Age >= 24){
if(paciente$Age < 27) return(0)
else return(1)
} else return(0)
}
}
}
}
}
resultados <- c()
for (i in 1:3000) {
resultados[i] <- Diabete(teste[i,])
}
for (i in 1:3000) {
resultados[i] <- Diabete(teste[i])
}
resultados <- c()
for (i in 1:3000) {
resultados[i] <- Diabete(teste[i,])
}
for (i in 1:nrow(teste)) {
resultados[i] <- Diabete(teste[i,])
}
Diabete <- function(paciente) {
if (paciente$Pregnancies < 2) return(0)
if (paciente$BMI < 22) return(0)
else {
if (paciente$SerumInsulin < 52) {
if (paciente$Age < 36) return(0)
else return(1)
} else {
if (paciente$Age >= 36) return(1)
else {
if (paciente$PlasmaGlucose < 96) {  # Corrigido o nome da coluna
if (paciente$BMI >= 33) return(1)
else return(0)
} else {
if (paciente$Age >= 24) {
if (paciente$Age < 27) return(0)
else return(1)
} else return(0)
}
}
}
}
}
resultados <- c()
for (i in 1:nrow(teste)) {
resultados[i] <- Diabete(teste[i,])
}
Diabete <- function(paciente) {
if (paciente$Pregnancies < 2) return(0)
if (paciente$BMI < 22) return(0)
else {
if (paciente$SerumInsulin < 52) {
if (paciente$Age < 36) return(0)
else return(1)
} else {
if (paciente$Age >= 36) return(1)
else {
if (paciente$PlasmaGlucose < 96) {
if (paciente$BMI >= 33) return(1)
else return(0)
} else {
if (paciente$Age >= 24) {
if (paciente$Age < 27) return(0)
else return(1)
} else return(0)
}
}
}
}
}
resultados <- c()
for (i in 1:nrow(teste)) {
resultados[i] <- Diabete(teste[i,])
}
mean(resultados == teste$Diabetic)
Diabete <- function(paciente) {
if (paciente$Pregnancies < 2) return(0)
if (paciente$BMI < 22) return(0)
else {
if (paciente$SerumInsulin < 52) {
if (paciente$Age < 36) return(0)
else return(1)
} else {
if(paciente$Age < 36){
if(paciente$PlasmaGlucose < 96){
if(paciente$BMI >= 33) return(0)
else return(1)
}
else{
if(paciente$Age >= 24){
if(paciente$Age < 27) return(0)
else return(1)
}
else return(1)
}
} else return(1)
}
}
}
resultados <- c()
for (i in 1:nrow(teste)) {
resultados[i] <- Diabete(teste[i,])
}
mean(resultados == teste$Diabetic)
modeloArvore <- rpart(data = treinamento,formula =  Diabetic~., method =  "class")
previsao <- predict(modeloArvore,newdata = teste, type = "class")
mean(previsao == teste$Diabetic)
#c)
?randomForest
install.packages("randomForest")
library(randomForest)
#c)
?randomForest
